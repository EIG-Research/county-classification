write_csv(city_data, file.path(csvs_mod_path, "city_data.csv"))
# 4. Process Metropolitan Definitions File
metro_def_file <- list.files(project_folder, pattern = "metro_def", full.names = TRUE)
metro_data <- read_csv(metro_def_file) %>%
filter(`Metropolitan/Micropolitan.Statistical.Area` == "Metropolitan") %>%
mutate(
metro_fips = `CBSA.CODE`,
metro_nm = `CBSA.Title`,
metro_cnt_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(`FIPS.State`)),
sprintf("%03d", as.numeric(`FIPS.County`))
))
) %>%
select(metro_fips, metro_nm, metro_cnt_fips)
# Export metro data
write_csv(metro_data, file.path(csvs_mod_path, "metro_data.csv"))
# Confirmation message
cat("Data processing complete. Files exported to:", csvs_mod_path, "\n")
}
# Run the data processing
process_census_files()
colnames("blk_pop23")
getwd()
setwd("G:/.shortcut-targets-by-id/0B8XLtQT1s8ceT2tKZWZmTkJmM1k/EIG/RESEARCH TEAM/5 TEAM RESOURCES/County Urban Rural Definitions/Update 2025/R_code_Dev/csvs")
getwd()
colnames("blk_pop23")
# Read only the header of the CSV file to get the column names
column_names <- colnames(read.csv("blk_pop23.csv", nrows = 1))
# Display the column names
print(column_names)
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEV == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "blk_pop23", full.names = TRUE)
bg_data <- read_csv(blk_pop_file) %>%
rename(
bg_fips = FIPS,
bg_nm = `Qualifying Name`,
bg_pop = `Total Population`
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
# 3. Process Subcounty Estimates File
sub_est_file <- list.files(project_folder, pattern = "sub-est2023", full.names = TRUE)
city_data <- read_csv(sub_est_file) %>%
filter(SUMLEV == 162) %>%
mutate(
city_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%05d", as.numeric(PLACE))
)),
city_nm = paste(NAME, STNAME, sep = ", "),
city_pop = POPESTIMATE2023
) %>%
select(city_fips, city_nm, city_pop)
# Export city data
write_csv(city_data, file.path(csvs_mod_path, "city_data.csv"))
# 4. Process Metropolitan Definitions File
metro_def_file <- list.files(project_folder, pattern = "metro_def", full.names = TRUE)
metro_data <- read_csv(metro_def_file) %>%
filter(`Metropolitan/Micropolitan Statistical Area` == "Metropolitan") %>%
mutate(
metro_fips = `CBSA CODE`,
metro_nm = `CBSA Title`,
metro_cnt_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(`FIPS State`)),
sprintf("%03d", as.numeric(`FIPS County`))
))
) %>%
select(metro_fips, metro_nm, metro_cnt_fips)
# Export metro data
write_csv(metro_data, file.path(csvs_mod_path, "metro_data.csv"))
# Confirmation message
cat("Data processing complete. Files exported to:", csvs_mod_path, "\n")
}
# Run the data processing
process_census_files()
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEVEL == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
bg_data <- read_csv(blk_pop_file, skip = 1) %>%
mutate(
bg_fips = as.numeric(substr(GEO_ID, 11, nchar(GEO_ID))),
bg_nm = NAME,
bg_pop = B01003_001E
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
# 3. Process Subcounty Estimates File
sub_est_file <- list.files(project_folder, pattern = "sub-est2023", full.names = TRUE)
city_data <- read_csv(sub_est_file) %>%
filter(SUMLEV == 162) %>%
mutate(
city_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%05d", as.numeric(PLACE))
)),
city_nm = paste(NAME, STNAME, sep = ", "),
city_pop = POPESTIMATE2023
) %>%
select(city_fips, city_nm, city_pop)
# Export city data
write_csv(city_data, file.path(csvs_mod_path, "city_data.csv"))
# 4. Process Metropolitan Definitions File
metro_def_file <- list.files(project_folder, pattern = "metro_def", full.names = TRUE)
metro_data <- read_csv(metro_def_file) %>%
filter(`Metropolitan/Micropolitan.Statistical.Area` == "Metropolitan") %>%
mutate(
metro_fips = `CBSA.CODE`,
metro_nm = `CBSA.Title`,
metro_cnt_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(`FIPS.State`)),
sprintf("%03d", as.numeric(`FIPS.County`))
))
) %>%
select(metro_fips, metro_nm, metro_cnt_fips)
# Export metro data
write_csv(metro_data, file.path(csvs_mod_path, "metro_data.csv"))
# Confirmation message
cat("Data processing complete. Files exported to:", csvs_mod_path, "\n")
}
# Run the data processing
process_census_files()
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEV == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
bg_data <- read_csv(blk_pop_file, skip = 1) %>%
mutate(
bg_fips = as.numeric(substr(GEO_ID, 11, nchar(GEO_ID))),
bg_nm = NAME,
bg_pop = B01003_001E
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
# 3. Process Subcounty Estimates File
sub_est_file <- list.files(project_folder, pattern = "sub-est2023", full.names = TRUE)
city_data <- read_csv(sub_est_file) %>%
filter(SUMLEV == 162) %>%
mutate(
city_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%05d", as.numeric(PLACE))
)),
city_nm = paste(NAME, STNAME, sep = ", "),
city_pop = POPESTIMATE2023
) %>%
select(city_fips, city_nm, city_pop)
# Export city data
write_csv(city_data, file.path(csvs_mod_path, "city_data.csv"))
# 4. Process Metropolitan Definitions File
metro_def_file <- list.files(project_folder, pattern = "metro_def", full.names = TRUE)
metro_data <- read_csv(metro_def_file) %>%
filter(`Metropolitan/Micropolitan Statistical Area` == "Metropolitan") %>%
mutate(
metro_fips = `CBSA.CODE`,
metro_nm = `CBSA Title`,
metro_cnt_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(`FIPS State`)),
sprintf("%03d", as.numeric(`FIPS County`))
))
) %>%
select(metro_fips, metro_nm, metro_cnt_fips)
# Export metro data
write_csv(metro_data, file.path(csvs_mod_path, "metro_data.csv"))
# Confirmation message
cat("Data processing complete. Files exported to:", csvs_mod_path, "\n")
}
# Run the data processing
process_census_files()
# Read only the header of the CSV file to get the column names
column_names <- colnames(read.csv("ACSDT5Y2023.B01003-Data", nrows = 1))
# Read only the header of the CSV file to get the column names
column_names <- colnames(read.csv("ACSDT5Y2023.B01003-Data.csv", nrows = 1))
# Display the column names
print(column_names)
# Check actual column names (including any hidden characters)
print(colnames(bg_data))
readLines(blk_pop_file, n = 5)
bg_data <- read_csv(blk_pop_file)  # No skip
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEV == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
bg_data <- read_csv(blk_pop_file, slice-2) %>%
mutate(
bg_fips = as.numeric(substr(GEO_ID, 11, nchar(GEO_ID))),
bg_nm = NAME,
bg_pop = B01003_001E
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
# 3. Process Subcounty Estimates File
sub_est_file <- list.files(project_folder, pattern = "sub-est2023", full.names = TRUE)
city_data <- read_csv(sub_est_file) %>%
filter(SUMLEV == 162) %>%
mutate(
city_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%05d", as.numeric(PLACE))
)),
city_nm = paste(NAME, STNAME, sep = ", "),
city_pop = POPESTIMATE2023
) %>%
select(city_fips, city_nm, city_pop)
# Export city data
write_csv(city_data, file.path(csvs_mod_path, "city_data.csv"))
# 4. Process Metropolitan Definitions File
metro_def_file <- list.files(project_folder, pattern = "metro_def", full.names = TRUE)
metro_data <- read_csv(metro_def_file) %>%
filter(`Metropolitan/Micropolitan Statistical Area` == "Metropolitan") %>%
mutate(
metro_fips = `CBSA.CODE`,
metro_nm = `CBSA Title`,
metro_cnt_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(`FIPS State`)),
sprintf("%03d", as.numeric(`FIPS County`))
))
) %>%
select(metro_fips, metro_nm, metro_cnt_fips)
# Export metro data
write_csv(metro_data, file.path(csvs_mod_path, "metro_data.csv"))
# Confirmation message
cat("Data processing complete. Files exported to:", csvs_mod_path, "\n")
}
# Run the data processing
process_census_files()
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEV == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
bg_data <- read_csv(blk_pop_file, slice(-2) %>%
mutate(
bg_fips = as.numeric(substr(GEO_ID, 11, nchar(GEO_ID))),
bg_nm = NAME,
bg_pop = B01003_001E
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
# Data Cleaning and Export Script for Census Files
# Function to select project folder
select_project_folder <- function() {
# Open a file dialog to select the project folder
project_folder <- rstudioapi::selectDirectory(caption = "Select Project Folder")
# Check if a folder was selected
if (is.null(project_folder)) {
stop("No folder selected. Exiting script.")
}
# Create a subfolder for modified CSVs if it doesn't exist
csvs_mod_path <- file.path(project_folder, "csvs_mod")
if (!dir.exists(csvs_mod_path)) {
dir.create(csvs_mod_path)
}
# Return a list with project folder and modified CSVs folder
return(list(
project_folder = project_folder,
csvs_mod_path = csvs_mod_path
))
}
# Main data processing function
process_census_files <- function() {
# Select project folder
folders <- select_project_folder()
project_folder <- folders$project_folder
csvs_mod_path <- folders$csvs_mod_path
# Load required libraries
library(readr)
library(dplyr)
# 1. Process County Estimates File
county_file <- list.files(project_folder, pattern = "co-est2023-alldata", full.names = TRUE)
county_data <- read_csv(county_file) %>%
filter(SUMLEV == 50) %>%
mutate(
county_nm = paste(CTYNAME, STNAME, sep = ", "),
county_fips = as.numeric(paste0(
sprintf("%02d", as.numeric(STATE)),
sprintf("%03d", as.numeric(COUNTY))
)),
county_pop = POPESTIMATE2023
) %>%
select(county_fips, county_nm, county_pop)
# Export county data
write_csv(county_data, file.path(csvs_mod_path, "county_data.csv"))
# 2. Process Block Group Population File
blk_pop_file <- list.files(project_folder, pattern = "ACSDT5Y2023.B01003-Data", full.names = TRUE)
bg_data <- read_csv(blk_pop_file, slice(-2) %>%
mutate(
bg_fips = as.numeric(substr(GEO_ID, 11, nchar(GEO_ID))),
bg_nm = NAME,
bg_pop = B01003_001E
) %>%
select(bg_fips, bg_nm, bg_pop)
# Export block group data
write_csv(bg_data, file.path(csvs_mod_path, "bg_data.csv"))
